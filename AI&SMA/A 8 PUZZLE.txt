import heapq

class Node:
    def __init__(self, data, level=0, fval=0):
        self.data = data
        self.level = level
        self.fval = fval

    def generate_child(self):
        x, y = self.find(self.data, 0)
        val_list = [[x, y - 1], [x, y + 1], [x - 1, y], [x + 1, y]]
        children = []
        for i in val_list:
            child = self.shuffle(self.data, x, y, i[0], i[1])
            if child is not None:
                child_node = Node(child, self.level + 1, 0)
                children.append(child_node)
        return children

    def shuffle(self, puz, x1, y1, x2, y2):
        if 0 <= x2 < len(puz) and 0 <= y2 < len(puz):
            temp_puz = self.copy(puz)
            temp = temp_puz[x2][y2]
            temp_puz[x2][y2] = temp_puz[x1][y1]
            temp_puz[x1][y1] = temp
            return temp_puz
        else:
            return None

    def copy(self, root):
        temp = []
        for i in root:
            t = []
            for j in i:
                t.append(j)
            temp.append(t)
        return temp

    def find(self, puz, x):
        for i in range(len(puz)):
            for j in range(len(puz)):
                if puz[i][j] == x:
                    return i, j

class Puzzle:
    def __init__(self, size):
        self.n = size
        self.open = []
        self.closed = []

    def accept(self):
        puz = []
        for i in range(self.n):
            temp = input().split(" ")
            puz.append(temp)
        return puz

    def f(self, start, goal):
        return self.h(start.data, goal) + start.level

    def h(self, start, goal):
        temp = 0
        for i in range(self.n):
            for j in range(self.n):
                if start[i][j] != goal[i][j] and start[i][j] != '0':
                    temp += 1
        return temp

    def process(self):
        print("Enter the start state matrix \n")
        start = self.accept()
        print("Enter the goal state matrix \n")
        goal = self.accept()

        start_node = Node(start, 0, 0)
        start_node.fval = self.f(start_node, goal)
        heapq.heappush(self.open, (start_node.fval, start_node))

        while self.open:
            _, current_node = heapq.heappop(self.open)
            self.closed.append(current_node)
            if current_node.data == goal:
                print("Solution Found \n")
                for row in current_node.data:
                    print(" ".join(row))
                break

            for child in current_node.generate_child():
                child.fval = self.f(child, goal)
                if self.is_present_in_list(child, self.open) or self.is_present_in_list(child, self.closed):
                    continue
                heapq.heappush(self.open, (child.fval, child))

    def is_present_in_list(self, node, list_):
         for element in list_:
            if isinstance(element, tuple):
                element = element[1]
            if node.data == element.data:
                return True
         return False

puz = Puzzle(3)
puz.process()