import heapq

def prims_algorithm(graph, start):
    mst = []  # List to store MST edges
    visited = set()
    min_heap = [(0, start, -1)]  # (weight, current_vertex, parent)

    while min_heap:
        weight, current_vertex, parent = heapq.heappop(min_heap)

        if current_vertex in visited:
            continue

        visited.add(current_vertex)

        if parent != -1:
            mst.append((parent, current_vertex, weight))

        for neighbor, edge_weight in graph[current_vertex]:
            if neighbor not in visited:
                heapq.heappush(min_heap, (edge_weight, neighbor, current_vertex))

    return mst

# Example graph as adjacency list
graph = {
    0: [(1, 4), (7, 8)],
    1: [(0, 4), (2, 8), (7, 11)],
    2: [(1, 8), (3, 7), (5, 4), (8, 2)],
    3: [(2, 7), (4, 9), (5, 14)],
    4: [(3, 9), (5, 10)],
    5: [(2, 4), (3, 14), (4, 10), (6, 2)],
    6: [(5, 2), (7, 1), (8, 6)],
    7: [(0, 8), (1, 11), (6, 1), (8, 7)],
    8: [(2, 2), (6, 6), (7, 7)]
}

start_vertex = 0
mst = prims_algorithm(graph, start_vertex)

print("Edges in Minimum Spanning Tree:")
for edge in mst:
    print(f"{edge[0]} -- {edge[1]} == {edge[2]}")
